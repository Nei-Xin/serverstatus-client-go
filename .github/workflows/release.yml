name: Build and Release

on:
  push:
    tags:
      - 'v*'
    branches:
      - main  # 可以选择是否包含分支推送触发

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'  # 使用稳定版本

    - name: Get version
      id: get_version
      run: |
        if [[ $GITHUB_REF == refs/tags/* ]]; then
          echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
        else
          echo "VERSION=dev-$(date +%Y%m%d)" >> $GITHUB_ENV
        fi

    - name: Build binaries
      run: |
        mkdir -p release
        
        # 设置正确的模块路径
        go mod tidy
        
        # Linux AMD64
        GOOS=linux GOARCH=amd64 go build -v -o release/serverstatus-client-linux-amd64 .
        cd release && tar -czvf "serverstatus-client-linux-amd64-$VERSION.tar.gz" serverstatus-client-linux-amd64 && cd ..
        
        # Linux 386
        GOOS=linux GOARCH=386 go build -v -o release/serverstatus-client-linux-386 .
        cd release && tar -czvf "serverstatus-client-linux-386-$VERSION.tar.gz" serverstatus-client-linux-386 && cd ..
        
        # Linux ARM
        GOOS=linux GOARCH=arm go build -v -o release/serverstatus-client-linux-arm .
        cd release && tar -czvf "serverstatus-client-linux-arm-$VERSION.tar.gz" serverstatus-client-linux-arm && cd ..
        
        # Linux ARM64
        GOOS=linux GOARCH=arm64 go build -v -o release/serverstatus-client-linux-arm64 .
        cd release && tar -czvf "serverstatus-client-linux-arm64-$VERSION.tar.gz" serverstatus-client-linux-arm64 && cd ..

    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: binaries
        path: release/*.tar.gz

    - name: Create Release
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      with:
        files: release/*.tar.gz
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
